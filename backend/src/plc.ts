import * as net from 'net';

function plcServer() {
    let server: net.Server | null = null;
    let client: net.Socket | null = null;

    function getStatusT(status: string, qty?: string): string {
        console.log("Received Status Code:", status);
        switch (status) {
            case '01': return 'T01'; // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
            case '02': return 'T02'; // ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            case '03': return `T03 - ‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÑ‡∏î‡πâ Q${qty}`; // ‡∏à‡πà‡∏≤‡∏¢‡∏¢‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            case '80': return '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≥‡∏î ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
            case '81': return '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≥‡∏î ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πÑ‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
            case '82': return '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≥‡∏î ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏π‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
            case '83': return '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≥‡∏î ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå';
            case '90': return '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
            case '91': return '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πÑ‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
            case '92': return '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏π‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
            default: return 'T00'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î ‡πÜ
        }
    }

    function startPlcServer({ port }: { port: number }) {
        server = net.createServer((socket) => {
            client = socket;
            console.log('üì° PLC Connected:', socket.remoteAddress, socket.remotePort);

            socket.on('data', (data) => {
                console.log('üì• Received from PLC:', data.toString());
                const status = data.toString().split("T", 2)[1]?.substring(0, 2) || "00";
                const response = getStatusT(status);
                console.log('Status:', response);
                socket.write(response);
            });

            socket.on('close', () => {
                console.log('‚ùå PLC Disconnected');
                client = null;
            });

            socket.on('error', (err) => {
                console.log('‚ö†Ô∏è Socket Error:', err.message);
            });
        });

        server.listen(port, () => {
            console.log(`üöÄ PLC Server started on port ${port}`);
        });

        server.on('error', (err) => {
            console.log('‚ö†Ô∏è Server Error:', err.message);
        });
    }

    function sendToPLC(data: string) {
        if (!client) {
            console.log('‚ö†Ô∏è No PLC Connected');
            return;
        }
        console.log('üì§ Sending to PLC:', data);
        client.write(data);
    }

    return {
        startPlcServer,
        sendToPLC
    };
}

export type PlcServer = ReturnType<typeof plcServer>;
export { plcServer };
